{
	"info": {
		"_postman_id": "2f96b947-f204-41e7-bf96-cca02459b90e",
		"name": "Test Lab 6",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30818096"
	},
	"item": [
		{
			"name": "posts",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
							"pm.test(\"Response is an array\", () => pm.expect(pm.response.json()).to.be.an('array'));\r",
							"pm.test(\"Array is not empty\", () => pm.expect(pm.response.json().length).to.be.above(0));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}posts",
					"host": [
						"{{URL}}posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "firstPost",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status 200 OK\", () => pm.response.to.have.status(200));\r",
							"pm.test(\"Post has ID 1\", () => pm.expect(pm.response.json().id).to.eql(1));\r",
							"pm.test(\"Post contains title\", () => pm.expect(pm.response.json()).to.have.property(\"title\"));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}posts/1",
					"host": [
						"{{URL}}posts"
					],
					"path": [
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "negativePosts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is empty\", () => {\r",
							"    pm.expect(pm.response.json()).to.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}posts/9999",
					"host": [
						"{{URL}}posts"
					],
					"path": [
						"9999"
					]
				}
			},
			"response": []
		},
		{
			"name": "users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
							"pm.test(\"Has name field\", () => pm.expect(pm.response.json()).to.have.property(\"name\"));\r",
							"pm.test(\"Username is defined\", () => pm.expect(pm.response.json().username).to.not.be.undefined);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}users/1",
					"host": [
						"{{URL}}users"
					],
					"path": [
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "negativeUsers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status 404 Not Found\", () => pm.response.to.have.status(404));\r",
							"pm.test(\"Empty response\", () => pm.expect(pm.response.json()).to.be.empty);\r",
							"pm.test(\"Valid JSON\", () => pm.expect(pm.response.json()).to.be.an(\"object\"));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}users/11",
					"host": [
						"{{URL}}users"
					],
					"path": [
						"11"
					]
				}
			},
			"response": []
		},
		{
			"name": "posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status 201 Created\", () => pm.response.to.have.status(201));\r",
							"pm.test(\"Response has ID\", () => pm.expect(pm.response.json()).to.have.property(\"id\"));\r",
							"pm.test(\"Title matches request\", () => pm.expect(pm.response.json().title).to.eql(\"My Test\"));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"My Test\",\r\n  \"body\": \"This is just a test\",\r\n  \"userId\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}posts",
					"host": [
						"{{URL}}posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "negativePosts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status 201 (Mock API limitation)\", () => pm.response.to.have.status(201));\r",
							"pm.test(\"Response contains bad_field\", () => pm.expect(pm.response.json()).to.have.property(\"bad_field\"));\r",
							"pm.test(\"No error message (API quirk)\", () => pm.expect(pm.response.json().error).to.be.undefined);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bad_field\": \"no title\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}posts",
					"host": [
						"{{URL}}posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status 200 OK\", () => pm.response.to.have.status(200));\r",
							"pm.test(\"Title updated\", () => pm.expect(pm.response.json().title).to.eql(\"Updated Title\"));\r",
							"pm.test(\"ID unchanged\", () => pm.expect(pm.response.json().id).to.eql(1));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 1,\r\n  \"title\": \"Updated Title\",\r\n  \"body\": \"Updated Content\",\r\n  \"userId\": 1\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}posts/1",
					"host": [
						"{{URL}}posts"
					],
					"path": [
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "negativePosts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 500\", () => {\r",
							"    pm.response.to.have.status(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Request has invalid userId\", () => {\r",
							"    const requestData = pm.request.body.raw;\r",
							"    pm.expect(requestData).to.include('\"userId\": \"invalid_id\"');\r",
							"});\r",
							"\r",
							"pm.test(\"Request has empty title\", () => {\r",
							"    const requestData = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(requestData.title).to.be.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"\",\r\n  \"body\": null,\r\n  \"userId\": \"invalid_id\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}posts/99999",
					"host": [
						"{{URL}}posts"
					],
					"path": [
						"99999"
					]
				}
			},
			"response": []
		},
		{
			"name": "posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status 200 OK\", () => pm.response.to.have.status(200));\r",
							"pm.test(\"Empty response\", () => pm.expect(pm.response.json()).to.be.empty);\r",
							"pm.test(\"Response time < 500ms\", () => pm.expect(pm.response.responseTime).to.be.below(500));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{URL}}posts/1",
					"host": [
						"{{URL}}posts"
					],
					"path": [
						"1"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "usernames",
			"value": ""
		}
	]
}